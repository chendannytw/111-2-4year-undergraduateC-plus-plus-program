main.cpp
// Fig. 9.3: fig09_03.cpp
// Program to test class Date.
// NOTE: This file must be compiled with Date.cpp.
#include <iostream>
#include <stdexcept> // for invalid_argument exception class
#include "Date.h" // include definitionof class Date from Date.h
using namespace std;

int main()
{
    Date t(1990, 1, 1); // instantiate object t of class Date

    // output Date object t's initial values
    cout << "The initial universal Date is ";
    t.printUniversal(); // 00:00:00
    cout << "\nThe initial standard Date is ";
    t.printStandard(); // 12:00:00 AM

    t.setDate(2023, 5, 24); // change Date

    // output Date object t's new values
    cout << "\n\nUniversal Date after setDate is ";
    t.printUniversal(); // 13:27:06
    cout << "\nStandard Date after setDate is ";
    t.printStandard(); // 1:27:06 PM

    // attempt to set the Date with invalid values
    try
    {
        t.setDate(99, 99, 99); // all values out of range
    } // end try
    catch (invalid_argument& e)
    {
        cout << "\n\nException: " << e.what() << endl;
    } // end catch

    // output t's values after specifying invalid values
    cout << "\nAfter attempting invalid settings:"
        << "\nUniversal Date: ";
    t.printUniversal(); // 13:27:06
    cout << "\nStandard Date: ";
    t.printStandard(); // 1:27:06 PM
    cout << endl;
} // end main

Date.cpp
// Fig. 9.2: Date.cpp
// Date class member-function definitions.
#include <iostream>
#include <iomanip>
#include <stdexcept> // for illegal_argument exception class
#include "Date.h" // include definition of class Date from Date.h

using namespace std;

// Date constructor initializes each data member to zero.
Date::Date(int y, int m, int d)
{
    year = y;
    month = m;
    day = d;
} // end Date constructor

// set new Date value using universal Date
void Date::setDate(int y, int m, int d)
{
    // validate year, month and day
    if ((y >= 0 && y < 9999) && (m >= 1 && m < 13) &&
        (d >= 1 && d < 32))
    {
        year = y;
        month = m;
        day = d;
    } // end if
    else
        throw invalid_argument(
            "year, month and/or day was out of range");
} // end function setDate

// print Date in universal-Date format (HH:MM:SS)
void Date::printUniversal() const
{
    cout <<"西元" << setfill('0') << setw(4) << year << "年"
        << setw(2) << month << "月" << setw(2) << day<<"號";
} // end function printUniversal

// print Date in standard-Date format (HH:MM:SS AM or PM)
void Date::printStandard() const
{
    cout  << ((year > 1911 ) ?year - 1911 :  1911 - year) << "年"
        << setfill('0') << setw(2) << month << "月" << setw(2)
        << day << "號"<< (year < 1911 ? " 民國前" : " 民國");
} // end function printStandard

Date.h
// Fig. 9.1: Time.h
// Time class definition.
// Member functions are defined in Time.cpp

// prevent multiple inclusions of header
#ifndef DATE_H
#define DATE_H

// Time class definition
class Date
{
public:
	Date(int, int, int); // constructor
	void setDate(int, int, int); // set hour, minute and second
	void printUniversal() const; // print time in universal-time format
	void printStandard() const; // print time in standard-time format
private:
	unsigned int year; // 0 - 9999 
	unsigned int month; // 1 - 12
	unsigned int day; // 1 - 31
}; // end class Time

#endif
