圓形與圓柱體:
// 2023-6-7 circle.cpp : 此檔案包含 'main' 函式。程式會於該處開始執行及結束執行。
//

#include <iostream>
#include<stdexcept>
#include"pie_2D.h"
#include"cylinder_3D.h"
using namespace std;

int main()
{
    double radious;
    double height;
    cout << "Enter radious for circle:" << endl;
    cin >> radious;
    pie_2d userenter(radious);
    cout << "Enter height for cylinder:" << endl;
    cin >> height;

    cylinder_3d userenter2(radious, height);
    cout << "The result is:\n\n";
    cout << "  The result of circle:\n";

    cout << "     Radious：" << userenter.getradious() <<"cm"

         << "\n     The area is "

        << userenter.compute_area() << " cm2\n" << endl;

    cout << "  The result of cylinder:\n";

    cout << "     Radious：" << userenter2.getradious() << " cm" <<  " | Height：" << userenter2.getheight()

        << " cm" << "\n     The volume is " << userenter2.compute_volume() << " cm3 | The surface is " << userenter2.compute_surface() << " cm2\n" << endl;



    system("pause");

}
//pie_2D.h
#ifndef pie2d_H

#define pie2d_H

using namespace std;

//square_2d的類別(包含6個成員函數與2個資料成員)

class pie_2d {

public:

    pie_2d(double = 0);           //建構子

    void setradious(double);           //設定半徑

    double getradious();                     //取得半徑

    double compute_area();            //計算面積

    double radious;                          //半徑


};

#endif
//pie_2D.cpp
#include<iostream>

#include<stdexcept>

#include"pie_2D.h"

using namespace std;

pie_2d::pie_2d(double r)

{

    setradious(r);


}

void pie_2d::setradious(double r) {

    radious = r;

}


double pie_2d::getradious() {

    return radious;

}


//圓面積

double pie_2d::compute_area(){

    return radious * radious*3.14;

}
//cylinder_3D.h
#ifndef cylinder3d_H

#define cylinder3d_H

#include"pie_2D.h"

using namespace std;

/*繼承類別的宣告方法為「衍生類別：基礎類別」*/

//繼承pie_2d類別的cylinder_3d類別(包含5個成員函數與1個資料成員 + pie_2d內的函數與資料成員)

class cylinder_3d:public pie_2d

{

public:

    cylinder_3d(double = 0, double = 0);            //建構子

    void setheight(double);                           //設定高度

    double getheight();                                     //取得高度   

    double compute_volume();                          //計算體積

    double compute_surface();                         //計算表面積

    double height;                                          //高

};

#endif
//cylinder_3D.cpp
#include<iostream>

#include<stdexcept>

#include"cylinder_3D.h"

using namespace std;

cylinder_3d::cylinder_3d(double r, double h)

{

    setradious(r);
    setheight(h);

}

void cylinder_3d::setheight( double h) {

    height = h;

}

double cylinder_3d::getheight() {

    return height;

}

//體積計算：半徑*半徑*3.14*高

double cylinder_3d::compute_volume()  {

    return radious * radious * 3.14 * height;

}

//表面積計算：2*圓面積+圓周長*高

double cylinder_3d::compute_surface()  {

    return 2 * radious  * 3.14+height*2*radious * 3.14 ;

}
//2023-5-31main.cpp
#include <iostream>
#include "Pet.h" // Pet class definition
using namespace std;

int main()
{
	Date birth(7, 24, 1949);
	Date adoptDate(3, 12, 1988);
	Pet data("Dog", "Alan", birth, adoptDate);

	cout << endl;
	data.print();
} // end main

//Date.cpp
#include <array>
#include <iostream>
#include <stdexcept>
#include "Date.h" // include Date class definition
using namespace std;

// constructor confirms proper value for month; calls
// utility function checkDay to confirm proper value for day
Date::Date(int mn, int dy, int yr)
{
    if (mn > 0 && mn <= monthsPerYear) // validate the month
        month = mn;
    else
        throw invalid_argument("month must be 1-12");

    year = yr; // could validate yr
    day = checkDay(dy); // validate the day

    // output Date object to show when its constructor is called
    cout << "Date object constructor for date ";
    print();
    cout << endl;
} // end Date constructor

// print Date object in form month/day/year
void Date::print() const
{
    cout << month << '/' << day << '/' << year;
} // end function print

// output Date object to show when its destructor is called
Date::~Date()
{
    cout << "Date object destructor for date ";
    print();
    cout << endl;
} // end ~Date destructor

// utility function to confirm proper day value based on 
// month and year; handles leap years, too
unsigned int Date::checkDay(int testDay)const
{
    static const array< int, monthsPerYear + 1 > daysPerMonth =
    { 0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 };

    // determine whether testDay is valid for specified month
    if (testDay > 0 && testDay <= daysPerMonth[month])
        return testDay;

    // February 29 check for leap year 
    if (month == 2 && testDay == 29 && (year % 400 == 0 ||
        (year % 4 == 0 && year % 100 != 0)))
        return testDay;

    throw invalid_argument("Invalid day for current month and year");
} // end function checkDay

//Date.h
#include <iostream>
#include "Pet.h" // Pet class definition
#include "Date.h" // Date class definition
using namespace std;

// constructor uses member initializer list to pass initializer 
// values to constructors of member objects  
Pet::Pet(const string& type, const string& name,
    const Date& dateOfBirth, const Date& dateOfadopt)
    : type(type), // initialize type
    Name(name), // initialize name
    birthDate(dateOfBirth), // initialize birthDate
    adoptDate(dateOfadopt) // initialize adoptDate
{
    // output Pet object to show when constructor is called
    cout << "Pet object constructor: "
        << type << ' ' << name << endl;
} // end Pet constructor

// print Pet object
void Pet::print() const
{
    cout << Name << ", " << type << "  adoptDate: ";
    adoptDate.print();
    cout << "  Birthday: ";
    birthDate.print();
    cout << endl;
    if (this->adoptDate.year > this->birthDate.year)
    {
        cout << "Pet date is right!";
    }
    else if ((this->adoptDate.year == this->birthDate.year)&& this->adoptDate.month > this->birthDate.month)
    {
        cout << "Pet date is right!";
    }
    else
    {
        cout << "Pet date is flase";
    }
} // end function print

// output Pet object to show when its destructor is called
Pet::~Pet()
{
    cout << "Pet object destructor: "
        << Name << ", " << type << endl;
} // end ~Pet destructor

//Pet.cpp

//Pet.h
